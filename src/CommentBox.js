import React from 'react';
import CommentList from './CommentList';
import CommentForm from './CommentForm';

export default class CommentBox extends React.Component {
    constructor(props) {
        super(props);
        this.state = {
            data: []
        }
        this.loadCommentsFromServer();
        setInterval(this.loadCommentsFromServer, this.props.pollInterval);
    }

    loadCommentsFromServer = () => {
        $.ajax({
            url: this.props.url,
            dataType: 'json',
            cache: false,
            success: (data) => {
                this.setState({data: data});
            },
            error: (xhr, status, err) => {
                console.error(this.props.url, status, err.toString());
            }
        });
    };
    handleCommentSubmit = (comment) => {
        let comments = this.state.data;
        // Optimistically set an id on the new comment. It will be replaced by an
        // id generated by the server. In a production application you would likely
        // not use Date.now() for this and would have a more robust system in place.
        comment.id = Date.now();
        let newComments = comments.concat([comment]);
        this.setState({data: newComments});
        $.ajax({
            url: this.props.url,
            dataType: 'json',
            type: 'POST',
            data: comment,
            success: (data) => {
                this.setState({data: data});
            },
            error: (xhr, status, err) => {
                this.setState({data: comments});
                console.error(this.props.url, status, err.toString());
            }
        });
    };
    handleCommentRemove = (id) => {
        console.log('REMOVE: ', id);
        $.ajax({
            url: this.props.url,
            dataType: 'json',
            type: 'DELETE',
            data: id,
            success: (data) => {
                this.setState({data: data});
            },
            error: (xhr, status, err) => {
                this.setState({data: comments});
                console.error(this.props.url, status, err.toString());
            }
        });
    };

    render() {
        return <div className="commentBox">
            <h1>Comments</h1>
            <CommentList data={this.state.data} onCommentRemove={this.handleCommentRemove}/>
            <CommentForm onCommentSubmit={this.handleCommentSubmit}/>
        </div>
    }
}