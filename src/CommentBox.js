import React from 'react';
import CommentList from './CommentList';
import CommentForm from './CommentForm';

export default class CommentBox extends React.Component {
    constructor(props) {
        super(props);
        this.state = {
            data: [{
                "id": 1388534400000,
                "author": "Pete Hunt",
                "text": "Hey there!",
                "likes": 0
            }, {
                "id": 1420070400000,
                "author": "Paul Oâ€™Shannessy",
                "text": "React is *great*!",
                "likes": 0
            }, {
                "id": 1455639402234,
                "author": "Karol",
                "text": "Hallo *react*",
                "likes": 0
            }]
        };
        //this.loadCommentsFromServer();
        //setInterval(this.loadCommentsFromServer.bind(this), this.props.pollInterval);
    }

    //loadCommentsFromServer() {
    //    $.ajax({
    //        url: this.props.url,
    //        dataType: 'json',
    //        cache: false,
    //        success: (data) => {
    //            this.setState({data: data});
    //        },
    //        error: (xhr, status, err) => {
    //            console.error(this.props.url, status, err.toString());
    //        }
    //    });
    //}

    handleCommentSubmit(comment) {
        //let comments = this.state.data;
        //// Optimistically set an id on the new comment. It will be replaced by an
        //// id generated by the server. In a production application you would likely
        //// not use Date.now() for this and would have a more robust system in place.
        //comment.id = Date.now();
        //let newComments = comments.concat([comment]);
        //this.setState({data: newComments});
        //$.ajax({
        //    url: this.props.url,
        //    dataType: 'json',
        //    type: 'POST',
        //    data: comment,
        //    success: (data) => {
        //        this.setState({data: data});
        //    },
        //    error: (xhr, status, err) => {
        //        this.setState({data: comments});
        //        console.error(this.props.url, status, err.toString());
        //    }
        //});

        let comments = this.state.data;
        comment.id = Date.now();
        comment.likes = 0;
        this.setState({data: [...comments, comment]});
    };

    handleCommentRemove(id) {
        //console.log('REMOVE: ', id);
        //$.ajax({
        //    url: this.props.url,
        //    dataType: 'json',
        //    type: 'DELETE',
        //    data: id,
        //    success: (data) => {
        //        this.setState({data: data});
        //    },
        //    error: (xhr, status, err) => {
        //        this.setState({data: this.state.data});
        //        console.error(this.props.url, status, err.toString());
        //    }
        //});

        let comments = this.state.data;
        let index = comments.findIndex(element => element.id === id);
        this.setState({data: [...comments.slice(0, index), ...comments.slice(index + 1)]});
    };

    handleCommentUpdate(comment) {
        //console.log('UPDATE: ', comment);
        //$.ajax({
        //    url: this.props.url,
        //    dataType: 'json',
        //    type: 'PUT',
        //    data: comment,
        //    success: (data) => {
        //        this.setState({data: data});
        //    },
        //    error: (xhr, status, err) => {
        //        this.setState({data: this.state.data});
        //        console.error(this.props.url, status, err.toString());
        //    }
        //});

        let comments = this.state.data;
        let index = comments.findIndex(element => element.id === comment.id);
        let newState = Object.assign([], comments);
        newState[index] = comment;
        this.setState({data: newState});
    };

    render() {
        return <div className="commentBox">
            <h1>Comments</h1>
            <CommentList data={this.state.data} onCommentRemove={this.handleCommentRemove.bind(this)}
                         onCommentUpdate={this.handleCommentUpdate.bind(this)}/>
            <CommentForm onCommentSubmit={this.handleCommentSubmit.bind(this)}/>
        </div>
    }
}
